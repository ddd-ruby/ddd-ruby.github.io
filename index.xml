<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DDD concepts with Ruby</title>
    <link>https://ddd-ruby.github.io/index.xml</link>
    <description>Recent content on DDD concepts with Ruby</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license</copyright>
    <lastBuildDate>Wed, 04 Jan 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://ddd-ruby.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Additional Information</title>
      <link>https://ddd-ruby.github.io/additional-information/</link>
      <pubDate>Wed, 04 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ddd-ruby.github.io/additional-information/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=CjNBnkMHjh4&#34;&gt;Domain-Driven Design for the Database Driven Mind - 2015&lt;/a&gt; + &lt;a href=&#34;https://github.com/julielerman/DomainDrivenDesignforDatabaseDrivenMind&#34;&gt;code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>DDD in Ruby</title>
      <link>https://ddd-ruby.github.io/</link>
      <pubDate>Tue, 08 Mar 2016 21:07:13 +0100</pubDate>
      
      <guid>https://ddd-ruby.github.io/</guid>
      <description>

&lt;h2 id=&#34;beautiful-highly-adaptable-and-maintainable-ruby-applications-only-a-dream&#34;&gt;Beautiful, highly adaptable and maintainable Ruby applications - only a dream?&lt;/h2&gt;

&lt;p&gt;At some point of your career you have probably heard about DDD (Domain Driven Design) and dismissed it quickly as overly complex and too &lt;code&gt;enterprisy&lt;/code&gt;. After all, MVC and CRUD seem so much simpler and why would you go through the trouble of introducing new layers of complexity to your Ruby / Rails application? It just works and is really easy do maintain for many years to come, right?&lt;/p&gt;

&lt;p&gt;Well&amp;hellip; If you have ever worked on a successful Rails application, you probably experienced firsthand the problems that grow, when you apply MVC / CRUD to more complex requirements. You might start to introduce some extra layers, like &lt;code&gt;services&lt;/code&gt;, &lt;code&gt;interactors&lt;/code&gt; and such. While doing this, you have to invent new patterns, that are not quite popular in the Ruby community and there is little guidence, where this path will lead you.&lt;/p&gt;

&lt;p&gt;We developers / builders / business-owners want similar things:
  - maintainable applications
  - correct software
  - good developer experience
  - this thing should run in production without major problems&lt;/p&gt;

&lt;p&gt;&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ruby libraries supporting DDD</title>
      <link>https://ddd-ruby.github.io/libraries/</link>
      <pubDate>Tue, 08 Mar 2016 21:07:13 +0100</pubDate>
      
      <guid>https://ddd-ruby.github.io/libraries/</guid>
      <description>

&lt;h2 id=&#34;rdm-the-missing-dependencies-manager-for-ruby-apps&#34;&gt;Rdm: the missing dependencies manager for Ruby apps&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ddd-ruby.github.io/rdm/&#34; target=&#34;_blank&#34;&gt;Rdm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With RDM you can split up one big Ruby application into multiple lightweight packages with explicit dependencies. You can do it before going the &lt;code&gt;microservices&lt;/code&gt; road, because this would be much smoother transition. Going from explicit dependencies graph to proper SOA / microservices is more straightforward. In DDD it helps to defined clearer &lt;a href=&#34;http://martinfowler.com/bliki/BoundedContext.html&#34;&gt;Bounded Contexts&lt;/a&gt;, where each package can only access explicit dependencies. Contrast this with a monolithic Rails application with one global Ruby memory space, and you might understand the benefit of having stricter, more explicit way to manage dependencies.&lt;/p&gt;

&lt;h2 id=&#34;smartioc-a-declarative-dependency-injection-library&#34;&gt;SmartIoC: a declarative dependency Injection library&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ddd-ruby.github.io/smart_ioc/&#34; target=&#34;_blank&#34;&gt;SmartIoC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;SmartIoC is a smart and really simple IoC container for Ruby applications.&lt;/p&gt;

&lt;p&gt;It allows you to create your dependencies on demand, supports lazy-loading of Ruby files, also allows different contexts for each dependency, so you get test/lightweight implementations in development / tests enviroments. It works great in combination with &lt;code&gt;Rdm&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;hcast-hash-attributes-caster-in-declarative-way&#34;&gt;Hcast - Hash attributes caster in declarative way&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ddd-ruby.github.io/hcast/&#34; target=&#34;_blank&#34;&gt;Hcast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the DDD context it helps to convert the user input to a properly casted Ruby object / hash.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting started</title>
      <link>https://ddd-ruby.github.io/getting-started/</link>
      <pubDate>Sat, 29 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ddd-ruby.github.io/getting-started/</guid>
      <description>&lt;p&gt;Motivate the reader to dive deeper in DDD concepts by gently introducing him to some basic material. Also explain how Ruby and DDD applied together help to maintain agile and flexible applications.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>