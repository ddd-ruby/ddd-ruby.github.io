<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DDD concepts with Ruby</title>
    <link>https://ddd-ruby.github.io/index.xml</link>
    <description>Recent content on DDD concepts with Ruby</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license</copyright>
    <lastBuildDate>Tue, 08 Mar 2016 21:07:13 +0100</lastBuildDate>
    <atom:link href="https://ddd-ruby.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>DDD in Ruby</title>
      <link>https://ddd-ruby.github.io/</link>
      <pubDate>Tue, 08 Mar 2016 21:07:13 +0100</pubDate>
      
      <guid>https://ddd-ruby.github.io/</guid>
      <description>

&lt;h2 id=&#34;beautiful-highly-adaptable-and-maintainable-ruby-applications&#34;&gt;Beautiful, highly adaptable and maintainable Ruby applications&lt;/h2&gt;

&lt;p&gt;Material is a theme for &lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt;, a fast and flexible static site generator. It is built using Google&amp;rsquo;s &lt;a href=&#34;https://www.google.com/design/spec/material-design/introduction.html&#34;&gt;material design&lt;/a&gt;
guidelines, fully responsive, optimized for touch and pointer devices as well
as all sorts of screen sizes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ddd-ruby.github.io/images/screen.png&#34; alt=&#34;Material Screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Material is very lightweight – it is built from scratch using Javascript and
CSS that weighs less than 30kb (minified, gzipped and excluding Google Fonts
and Analytics). Yet, it is highly customizable and degrades gracefully in older
browsers.&lt;/p&gt;

&lt;h2 id=&#34;quick-start&#34;&gt;Quick start&lt;/h2&gt;

&lt;p&gt;Install with &lt;code&gt;git&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone git@github.com:digitalcraftsman/hugo-material-docs.git themes/hugo-material-docs
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Beautiful, readable and very user-friendly design based on Google&amp;rsquo;s material
design guidelines, packed in a full responsive template with a well-defined
and &lt;a href=&#34;https://ddd-ruby.github.io/getting-started/#changing-the-color-palette&#34;&gt;easily customizable color palette&lt;/a&gt;, great typography, as well as a
beautiful search interface and footer.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Well-tested and optimized Javascript and CSS including a cross-browser
fixed/sticky header, a drawer that even works without Javascript using
the &lt;a href=&#34;http://tutorialzine.com/2015/08/quick-tip-css-only-dropdowns-with-the-checkbox-hack/&#34;&gt;checkbox hack&lt;/a&gt; with fallbacks, responsive tables that scroll when
the screen is too small and well-defined print styles.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Extra configuration options like a &lt;a href=&#34;https://ddd-ruby.github.io/getting-started/#adding-a-logo&#34;&gt;project logo&lt;/a&gt;, links to the authors
&lt;a href=&#34;https://ddd-ruby.github.io/getting-started/#adding-a-github-and-twitter-account&#34;&gt;GitHub and Twitter accounts&lt;/a&gt; and display of the amount of stars the
project has on GitHub.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Web application capability on iOS – when the page is saved to the homescreen,
it behaves and looks like a native application.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See the &lt;a href=&#34;https://ddd-ruby.github.io/getting-started/&#34;&gt;getting started guide&lt;/a&gt; for instructions how to get
it up and running.&lt;/p&gt;

&lt;h2 id=&#34;acknowledgements&#34;&gt;Acknowledgements&lt;/h2&gt;

&lt;p&gt;Last but not least a big thank you to &lt;a href=&#34;https://github.com/squidfunk&#34;&gt;Martin Donath&lt;/a&gt;. He created the original &lt;a href=&#34;https://github.com/squidfunk/mkdocs-material&#34;&gt;Material theme&lt;/a&gt; for Hugo&amp;rsquo;s companion &lt;a href=&#34;http://www.mkdocs.org/&#34;&gt;MkDocs&lt;/a&gt;. This port wouldn&amp;rsquo;t be possible without him.&lt;/p&gt;

&lt;p&gt;Furthermore, thanks to &lt;a href=&#34;https://gihub.com/spf13&#34;&gt;Steve Francia&lt;/a&gt; for creating Hugo and the &lt;a href=&#34;https://github.com/spf13/hugo/graphs/contributors&#34;&gt;awesome community&lt;/a&gt; around the project.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ruby libraries supporting DDD</title>
      <link>https://ddd-ruby.github.io/libraries/</link>
      <pubDate>Tue, 08 Mar 2016 21:07:13 +0100</pubDate>
      
      <guid>https://ddd-ruby.github.io/libraries/</guid>
      <description>

&lt;h2 id=&#34;rdm-the-missing-dependencies-manager-for-ruby-apps&#34;&gt;Rdm: the missing dependencies manager for Ruby apps&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ddd-ruby.github.io/rdm/&#34; target=&#34;_blank&#34;&gt;Rdm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With RDM you can split up one big Ruby application into multiple lightweight packages with explicit dependencies. You can do it before going the &lt;code&gt;microservices&lt;/code&gt; road, because this would be much smoother transition. Going from explicit dependencies graph to proper SOA / microservices is more straightforward. In DDD it helps to defined clearer &lt;a href=&#34;http://martinfowler.com/bliki/BoundedContext.html&#34;&gt;Bounded Contexts&lt;/a&gt;, where each package can only access explicit dependencies. Contrast this with a monolithic Rails application with one global Ruby memory space, and you might understand the benefit of having stricter, more explicit way to manage dependencies.&lt;/p&gt;

&lt;h2 id=&#34;hcast-hash-attributes-caster-in-declarative-way&#34;&gt;Hcast - Hash attributes caster in declarative way&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ddd-ruby.github.io/hcast/&#34; target=&#34;_blank&#34;&gt;Hcast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the DDD context it helps to convert the user input to a properly casted Ruby object / hash.&lt;/p&gt;

&lt;h2 id=&#34;smartioc-a-declarative-dependency-injection-library&#34;&gt;SmartIoC: a declarative dependency Injection library&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ddd-ruby.github.io/smart_ioc/&#34; target=&#34;_blank&#34;&gt;SmartIoC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;SmartIoC is a smart and really simple IoC container for Ruby applications.&lt;/p&gt;

&lt;p&gt;It allows you to create your dependencies on demand, supports lazy-loading of Ruby files, also allows different contexts for each dependency, so you get test/lightweight implementations in development / tests enviroments. It works great in combination with &lt;code&gt;Rdm&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting started</title>
      <link>https://ddd-ruby.github.io/getting-started/</link>
      <pubDate>Sat, 29 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ddd-ruby.github.io/getting-started/</guid>
      <description>&lt;p&gt;Write about how to start with DDD in Ruby&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>